<table class="handEntry">
    @foreach((int index, string icon, string rowClass) in Suits.Select((x, i) => (i, x.Item2, x.Item3))) {
        <tr>
            <td class="rowClass">
                @icon
            </td>
            <td>
                <SelectList T="int" @ref=SuitLists[index] Elements=Cards/>
            </td>
        </tr>
    }
</table>

@using Bidding;

@code {
    private List<(int, string)> Cards = new List<(int, string)> {
        (0, "2"), (1, "3"), (2, "4"), (3, "5"), (4, "6"), (5, "7"), (6, "8"), (7, "9"), (8, "10"), (9, "J"), (10, "Q"), (11, "K"), (12, "A")
    };
    private SelectList<int>[] SuitLists = new SelectList<int>[] {null, null, null, null};
    private List<(Suit, string, string)> Suits = new List<(Suit, string, string)> {
        (Suit.Clubs, "♣", "blackSuit"),
        (Suit.Diamonds, "♦", "redSuit"),
        (Suit.Hearts, "♥", "redSuit"),
        (Suit.Spades, "♠", "blackSuit")
    };
    public void Clear() {
        foreach (SelectList<int> suitList in SuitLists) {
            suitList.SetSelected(Enumerable.Repeat(false, 13).ToList());
        }
    }
    public void SetCards(List<(Suit, int)> inputCards) {
        for (int i = 0; i < 4; i++) {
            Suit suit = Suits[i].Item1;
            SuitLists[i].SetSelected(Cards.Select(x => inputCards.Contains((suit, x.Item1))).ToList());
        }
    }
    public List<(Suit, int)> GetCards() {
        return Enumerable.Zip(Suits, SuitLists)
                         .Select(SuitDataAndSuitList => (
                            SuitDataAndSuitList.Second.GetSelected()
                                                      .Select(x => (SuitDataAndSuitList.First.Item1, x)) 
                         ))
                         .SelectMany(x => x)
                         .ToList();
    }
}
