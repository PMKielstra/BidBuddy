

<table>
    <tr>
        <td>
            Enter hand
        </td>
        <td></td>
        <td>
            Enter other three players' hands (in any order)
        </td>
    </tr>
    <tr>
        <td>
            <HandModalButton @ref=@OneHandButton />
        </td>
        <td>
            Or
        </td>
        <td>
            <HandModalButton @ref=@h1 />
            <HandModalButton @ref=@h2 />
            <HandModalButton @ref=@h3 />
        </td>
    </tr>
</table>

@using Bidding;

@code {
    private List<(Bidding.Position, string)> Positions = new List<(Bidding.Position, string)> {
        (Bidding.Position.North, "North"),
        (Bidding.Position.East, "East"),
        (Bidding.Position.South, "South"),
        (Bidding.Position.West, "West")
    };
    private HandModalButton OneHandButton;
    private HandModalButton h1;
    private HandModalButton h2;
    private HandModalButton h3;
    private List<Suit> Suits = new List<Suit> {Suit.Clubs, Suit.Diamonds, Suit.Hearts, Suit.Spades};
    private List<int> Values = new List<int> {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    public List<(Suit, int)> GetCards() {
        var OneHandList = OneHandButton.GetCards();
        if (OneHandList.Count() == 13) {
            return OneHandList;
        }
        var allHands = new HandModalButton[]{h1, h2, h3}.SelectMany(x => x.GetCards()).ToList();
        return Suits.SelectMany(x => Values, (x, y) => (x, y))
            .Where(x => !allHands.Contains(x)).ToList();
    }
    public void Clear() {
        OneHandButton.Clear();
        foreach (HandModalButton hmb in new HandModalButton[]{h1, h2, h3}) {
            hmb.Clear();
        }
    }
    public Hand GetHand() {
        return new() {
            seat = Bidding.Position.North,
            dealer = Bidding.Position.East,
            vulnerability = Bidding.Vulnerability.Neither,
            cards = GetCards()
        };
    }
}
